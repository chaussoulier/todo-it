import { renderTaskCard, calculateImportanceScore } from './render-utils.js';
import { tasks, tasksLoaded, setTasks } from './task-data.js';
import { initFirebase } from './firebase-service.js';
import { isToday } from './date-utils.js';
import { openTaskDetailModal } from './task-modal.js';

// Variable globale pour le mode de vue (true = vue d√©taill√©e par d√©faut)
let isDetailedView = false;

// Fonction pour basculer entre la vue d√©taill√©e et la vue simple
function toggleViewMode() {
  isDetailedView = !isDetailedView;
  
  // Mettre √† jour l'√©tat du checkbox
  const viewModeToggle = document.getElementById('view-mode-toggle');
  viewModeToggle.checked = isDetailedView;
  
  // Mettre √† jour le texte du label
  const viewModeLabel = document.querySelector('label[for="view-mode-toggle"]');
  viewModeLabel.textContent = isDetailedView ? 'Vue d√©taill√©e' : 'Vue simple';
  
  // Mettre √† jour l'affichage des cartes
  updateTaskDescriptionVisibility();
}

// Mettre √† jour la visibilit√© des descriptions de t√¢ches
function updateTaskDescriptionVisibility() {
  const taskDescriptions = document.querySelectorAll('.task-description-content');
  
  taskDescriptions.forEach(description => {
    if (isDetailedView) {
      description.style.display = 'block';
    } else {
      description.style.display = 'none';
    }
  });
}

// Fonction pour initialiser les t√¢ches localement si aucune n'est charg√©e
function initLocalTasks() {
  console.log('üíæ [today.js] D√©but initLocalTasks - tasks.length:', tasks.length);
  
  // Si tasks est vide, essayer de charger depuis localStorage
  if (tasks.length === 0) {
    const localTasks = JSON.parse(localStorage.getItem('tasks')) || [];
    console.log('üíæ [today.js] T√¢ches trouv√©es dans localStorage:', localTasks.length);
    
    // Afficher les t√¢ches termin√©es pour d√©bogage
    const completedTasks = localTasks.filter(t => t.statut === 'Termin√©e');
    console.log('üíæ [today.js] T√¢ches termin√©es dans localStorage:', completedTasks.length);
    if (completedTasks.length > 0) {
      console.log('üíæ [today.js] Exemple de t√¢che termin√©e:', completedTasks[0].titre);
    }
    
    if (localTasks.length > 0) {
      // Mettre √† jour le tableau global tasks
      tasks.splice(0, tasks.length, ...localTasks);
      // Assurer que la promesse tasksLoaded est r√©solue
      setTasks(localTasks);
      console.log('üíæ [today.js] T√¢ches charg√©es depuis localStorage:', tasks.length);
    } else {
      // Cr√©er une t√¢che de test pour aujourd'hui
      const today = new Date();
      const todayStr = today.toISOString().split('T')[0];
      const testTask = {
        id: 'test-task-' + Date.now(),
        titre: 'T√¢che de test pour aujourd\'hui',
        description: 'Cette t√¢che a √©t√© cr√©√©e automatiquement pour tester l\'affichage',
        statut: '√Ä faire',
        deadline: todayStr,
        tag: 'test',
        importance: '!!',
        log: ['Cr√©√©e le ' + new Date().toLocaleString('fr-FR')]
      };
      tasks.push(testTask);
      localStorage.setItem('tasks', JSON.stringify(tasks));
    }
  }
}

function renderTodayTasks() {
  console.log('üìÖ [today.js] D√©but de renderTodayTasks');
  
  // Initialiser Firebase (sans attendre)
  initFirebase();
  
  // Si aucune t√¢che n'est disponible, essayer de les charger depuis localStorage
  if (tasks.length === 0) {
    console.log('üìÖ [today.js] Aucune t√¢che disponible, appel de initLocalTasks');
    initLocalTasks();
  }
  
  console.log(`üìÖ [today.js] Nombre total de t√¢ches disponibles: ${tasks.length}`);
  const completedTasks = tasks.filter(t => t.statut === 'Termin√©e').length;
  console.log(`üìÖ [today.js] Dont ${completedTasks} t√¢ches termin√©es`);
  
  // Obtenir la date d'aujourd'hui
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const todayISO = `${year}-${month}-${day}`; // Format YYYY-MM-DD
  console.log(`üìÖ [today.js] Date d'aujourd'hui (ISO): ${todayISO}`);
  
  // Filtrer uniquement les t√¢ches du jour
  console.log('üìÖ [today.js] Filtrage des t√¢ches pour aujourd\'hui...');
  const todayTasks = tasks.filter(task => {
    // Ignorer les t√¢ches termin√©es ou sans deadline
    if (!task.deadline) {
      console.log(`üìÖ [today.js] T√¢che sans deadline ignor√©e: ${task.titre}`);
      return false;
    }
    
    if (task.statut === 'Termin√©e') {
      console.log(`üìÖ [today.js] T√¢che termin√©e ignor√©e: ${task.titre}`);
      return false;
    }
    
    // Comparer directement les dates au format YYYY-MM-DD
    // Cela √©vite les probl√®mes de fuseaux horaires
    const taskDateStr = task.deadline.split('T')[0];
    const isForToday = taskDateStr === todayISO;
    
    if (isForToday) {
      console.log(`üìÖ [today.js] T√¢che pour aujourd'hui trouv√©e: ${task.titre}`);
    }
    
    return isForToday;
  });
  
  // Trier les t√¢ches par ordre d'importance (du plus important au moins important)
  todayTasks.sort((a, b) => {
    const scoreA = calculateImportanceScore(a);
    const scoreB = calculateImportanceScore(b);
    return scoreB - scoreA; // Ordre d√©croissant
  });
  
  const col1 = document.getElementById('today-col-1');
  const col2 = document.getElementById('today-col-2');
  const col3 = document.getElementById('today-col-3');

  if (!col1 || !col2 || !col3) {
    console.error('‚ùå Les colonnes today-col-1 √† 3 sont manquantes dans le HTML');
    return;
  }

  // Vider les colonnes
  col1.innerHTML = '';
  col2.innerHTML = '';
  col3.innerHTML = '';

  if (todayTasks.length === 0) {
    col1.innerHTML = '<p class="text-muted">Aucune t√¢che pour aujourd\'hui</p>';
    return;
  }
  
  // R√©partition dans les 3 colonnes
  todayTasks.forEach((task, index) => {
    const col = index % 3 === 0 ? col1 : index % 3 === 1 ? col2 : col3;
    renderTaskCard(task, index, col);
    
    // Ajouter l'√©couteur d'√©v√©nement pour ouvrir la modale de d√©tail
    // Attendre un court instant pour que le DOM soit mis √† jour
    setTimeout(() => {
      const taskCard = col.querySelector(`.task-card[data-task-index="${index}"]`);
      if (taskCard) {
        // Ajouter un √©couteur d'√©v√©nement sur le titre de la t√¢che
        const titleEl = taskCard.querySelector('.task-title');
        if (titleEl) {
          titleEl.style.cursor = 'pointer';
          titleEl.addEventListener('click', () => {
            if (task.id) {
              openTaskDetailModal(task.id);
            } else {
              console.error('‚ùå La t√¢che n\'a pas d\'ID:', task);
            }
          });
        }
      }
    }, 100);
  });
}

// Fonction pour marquer une t√¢che comme termin√©e
function markAsDone(index) {
  console.log('üî¥ [today.js] markAsDone appel√© avec index:', index);
  
  // R√©cup√©rer la t√¢che correspondant √† l'index dans le DOM
  const taskCard = document.querySelector(`.task-card[data-task-index="${index}"]`);
  if (!taskCard) {
    console.error("Carte de t√¢che introuvable pour l'index:", index);
    return;
  }
  console.log('üî¥ [today.js] Carte de t√¢che trouv√©e:', taskCard);
  
  // Trouver l'index r√©el dans le tableau global tasks
  const taskId = taskCard.dataset.taskId;
  console.log('üî¥ [today.js] ID de la t√¢che:', taskId);
  const taskIndex = tasks.findIndex(t => t.id === taskId);
  console.log('üî¥ [today.js] Index trouv√© dans le tableau tasks:', taskIndex);
  
  let taskToUpdate;
  let taskIndexToUpdate;
  
  if (taskIndex === -1) {
    // Si on ne trouve pas par ID, essayer de trouver par index direct
    // (pour la compatibilit√© avec les anciennes versions)
    index = parseInt(index, 10);
    if (isNaN(index) || index < 0 || index >= tasks.length) {
      console.error("T√¢che introuvable:", index);
      return;
    }
    
    taskToUpdate = tasks[index];
    taskIndexToUpdate = index;
  } else {
    // Utiliser l'index r√©el
    taskToUpdate = tasks[taskIndex];
    taskIndexToUpdate = taskIndex;
  }
  
  // Mettre √† jour la t√¢che
  taskToUpdate.statut = "Termin√©e";
  taskToUpdate.completedAt = new Date().toISOString();
  taskToUpdate.log = taskToUpdate.log || [];
  taskToUpdate.log.push(`Marqu√©e comme termin√©e le ${new Date().toLocaleString('fr-FR')}`);
  console.log('üî¥ [today.js] T√¢che mise √† jour:', taskToUpdate);
  
  // V√©rifier l'√©tat du tableau tasks avant sauvegarde
  const completedTasksBeforeSave = tasks.filter(t => t.statut === 'Termin√©e').length;
  console.log(`üî¥ [today.js] Avant sauvegarde: ${completedTasksBeforeSave} t√¢ches termin√©es sur ${tasks.length} t√¢ches au total`);
  
  // S'assurer que la mise √† jour est enregistr√©e dans Firebase si disponible
  if (window.firebaseService && typeof window.firebaseService.saveTasks === 'function') {
    console.log('üî¥ [today.js] Sauvegarde avec window.firebaseService.saveTasks');
    window.firebaseService.saveTasks(tasks);
  } else if (typeof saveAndSync === 'function') {
    console.log('üî¥ [today.js] Sauvegarde avec saveAndSync');
    saveAndSync(taskToUpdate);
  } else {
    console.log('üî¥ [today.js] Aucune fonction de sauvegarde Firebase disponible');
  }
  
  // Forcer la synchronisation compl√®te du tableau tasks dans localStorage
  console.log('üî¥ [today.js] Sauvegarde dans localStorage');
  localStorage.setItem('tasks', JSON.stringify(tasks));
  
  // V√©rifier que la sauvegarde a bien fonctionn√©
  const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];
  const completedTasksAfterSave = savedTasks.filter(t => t.statut === 'Termin√©e').length;
  console.log(`üî¥ [today.js] Apr√®s sauvegarde dans localStorage: ${completedTasksAfterSave} t√¢ches termin√©es sur ${savedTasks.length} t√¢ches au total`);
  
  // Rafra√Æchir l'affichage des t√¢ches
  renderTodayTasks();
  
  // Indiquer √† l'utilisateur que la t√¢che a √©t√© marqu√©e comme termin√©e
  console.log(`T√¢che "${taskToUpdate.titre}" marqu√©e comme termin√©e`);
}

// Fonction pour sauvegarder les d√©tails d'une t√¢che depuis la modale
function saveTaskDetails() {
  const index = parseInt(document.getElementById('modal-task-index').value, 10);
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide pour la sauvegarde:", index);
    return;
  }
  
  const oldStatut = tasks[index].statut;
  const newStatut = document.getElementById('modal-task-statut').value;
  
  // Mettre √† jour les propri√©t√©s de la t√¢che
  tasks[index].titre = document.getElementById('modal-task-title').value;
  tasks[index].tag = document.getElementById('modal-task-tag').value;
  tasks[index].deadline = document.getElementById('modal-task-deadline').value;
  tasks[index].statut = newStatut;
  tasks[index].importance = document.getElementById('modal-task-importance').value;
  
  // G√©rer la description (TinyMCE ou textarea standard)
  if (window.tinymce && tinymce.get('modal-task-description')) {
    tasks[index].description = tinymce.get('modal-task-description').getContent();
  } else {
    tasks[index].description = document.getElementById('modal-task-description').value;
  }
  
  // Ajouter une entr√©e au journal si le statut a chang√©
  if (oldStatut !== newStatut) {
    tasks[index].log = tasks[index].log || [];
    tasks[index].log.push(`Statut chang√© de "${oldStatut}" √† "${newStatut}" le ${new Date().toLocaleString('fr-FR')}`);
    
    // Si la t√¢che est marqu√©e comme termin√©e, enregistrer la date de compl√©tion
    if (newStatut === "Termin√©e") {
      tasks[index].completedAt = new Date().toISOString();
    }
  }
  
  // Sauvegarder la t√¢che avec Firebase si disponible
  if (window.firebaseService && typeof window.firebaseService.saveTasks === 'function') {
    window.firebaseService.saveTasks(tasks);
  } else if (typeof saveAndSync === 'function') {
    saveAndSync(tasks[index]);
  }
  
  // Forcer la synchronisation compl√®te du tableau tasks dans localStorage
  localStorage.setItem('tasks', JSON.stringify(tasks));
  
  // Fermer la modale
  const modal = bootstrap.Modal.getInstance(document.getElementById('taskDetailModal'));
  if (modal) {
    modal.hide();
  }
  
  // Rafra√Æchir l'affichage des t√¢ches
  renderTodayTasks();
  
  // Indiquer √† l'utilisateur que la t√¢che a √©t√© mise √† jour
  console.log(`T√¢che "${tasks[index].titre}" mise √† jour`);
}

// S'assurer que le DOM est charg√© avant d'appeler renderTodayTasks
document.addEventListener('DOMContentLoaded', () => {
  // Initialiser l'√©tat du toggle de vue d√©taill√©e
  const viewModeToggle = document.getElementById('view-mode-toggle');
  if (viewModeToggle) {
    viewModeToggle.checked = isDetailedView;
    const viewModeLabel = document.querySelector('label[for="view-mode-toggle"]');
    if (viewModeLabel) {
      viewModeLabel.textContent = isDetailedView ? 'Vue d√©taill√©e' : 'Vue simple';
    }
    
    // Ajouter l'√©couteur d'√©v√©nement pour le toggle
    viewModeToggle.addEventListener('change', toggleViewMode);
  }
  
  // Ajouter l'√©couteur d'√©v√©nement pour le formulaire d'ajout de t√¢che
  const taskForm = document.getElementById('task-form');
  if (taskForm) {
    taskForm.addEventListener('submit', addTask);
  }
  
  // Ajouter l'√©couteur d'√©v√©nement pour le bouton 'Enregistrer' de la modale
  const saveTaskDetailsBtn = document.getElementById('save-task-details-btn');
  if (saveTaskDetailsBtn) {
    saveTaskDetailsBtn.addEventListener('click', saveTaskDetails);
  }
  
  // Ajouter des √©couteurs d'√©v√©nements pour les boutons 'Terminer' des t√¢ches
  document.addEventListener('click', function(event) {
    if (event.target.classList.contains('done-btn')) {
      const index = event.target.dataset.index;
      if (index !== undefined) {
        markAsDone(index);
      }
    }
  });
  
  renderTodayTasks();
});

// Fonction pour ajouter une t√¢che (sp√©cifique √† today.html)
function addTask(event) {
  event.preventDefault();
  
  const titre = document.getElementById("task-title").value.trim();
  const tag = document.getElementById("task-tag").value.trim();
  const statut = document.getElementById("task-statut").value || "√Ä faire";
  const importance = document.getElementById("task-importance").value || "!";
  
  if (!titre) {
    alert("Le titre est obligatoire");
    return;
  }
  
  // Utiliser la date d'aujourd'hui automatiquement
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const todayISO = `${year}-${month}-${day}`;
  
  const nouvelleTache = {
    id: `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    titre,
    tag,
    deadline: todayISO, // Utiliser la date d'aujourd'hui
    statut,
    importance,
    description: "",
    etapes: [],
    createdAt: new Date().toISOString(),
    log: [`Cr√©√©e le ${new Date().toLocaleString('fr-FR')}`]
  };
  
  tasks.push(nouvelleTache);
  
  // Sauvegarder la t√¢che (utiliser saveAndSync si disponible, sinon localStorage)
  if (typeof saveAndSync === 'function') {
    saveAndSync(nouvelleTache);
  } else {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }
  
  document.getElementById("task-form").reset();
  document.getElementById("task-statut").value = "√Ä faire";
  
  // Rafra√Æchir l'affichage des t√¢ches
  renderTodayTasks();
  
  // Mettre √† jour les suggestions de tags si la fonction est disponible
  if (typeof updateTagSuggestions === 'function') {
    updateTagSuggestions();
  }
}

// Appeler √©galement renderTodayTasks imm√©diatement au cas o√π le DOM est d√©j√† charg√©
renderTodayTasks();