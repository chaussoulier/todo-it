const form = document.getElementById('task-form');
const todayColumn = document.getElementById('today-column');
const tomorrowColumn = document.getElementById('tomorrow-column');
const futureColumn = document.getElementById('future-column');
const lateColumn1 = document.getElementById('late-column-1');
const lateColumn2 = document.getElementById('late-column-2');
const lateColumn3 = document.getElementById('late-column-3');
const lateColumn4 = document.getElementById('late-column-4');
const completedTasks = document.getElementById('completed-tasks');

let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
let isDetailedView = true; // Par d√©faut, on est en vue d√©taill√©e

function saveTasks() {
  localStorage.setItem('tasks', JSON.stringify(tasks));
}

function formatDeadline(dateStr) {
  if (!dateStr) return "";

  const deadline = new Date(dateStr);
  deadline.setHours(0, 0, 0, 0);
  
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const diffTime = deadline - today;
  const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays < 0) return "üï∞Ô∏è En retard";
  if (diffDays === 0) return "üìÜ Aujourd'hui";
  if (diffDays === 1) return "‚è∞ Demain";
  if (diffDays >= 2 && diffDays <= 5) {
    return `üìÖ ${deadline.toLocaleDateString('fr-FR', { weekday: 'long' })}`;
  }

  return `‚úÖ ${deadline.toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' })}`;
}

function getTagClass(tag) {
  // Normaliser le tag pour le comparer
  const normalizedTag = tag.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ /g, "-");
  
  // D√©finir des classes sp√©cifiques pour certains tags
  const tagClasses = {
    'test': 'illustration',
    'ems': 'design',
    'testa': 'ui-design',
    'all': 'ui-design',
    'ui': 'ui-design',
    'copywriting': 'copywriting',
    'lcf': 'copywriting',
    'perso': 'perso',
    'personnel': 'perso',
    'cocolor': 'travail',
    'pro': 'travail',
    'professionnel': 'travail'
  };
  
  return tagClasses[normalizedTag] || '';
}

function renderTasksFiltered() {
  const filterTag = document.getElementById('filter-tag').value;
  const sortBy = document.getElementById('sort-by').value;

  // Vider toutes les colonnes
  todayColumn.innerHTML = "";
  tomorrowColumn.innerHTML = "";
  futureColumn.innerHTML = "";
  lateColumn1.innerHTML = "";
  lateColumn2.innerHTML = "";
  lateColumn3.innerHTML = "";
  lateColumn4.innerHTML = "";
  completedTasks.innerHTML = "";

  let filtered = tasks.filter(task => {
    const matchTag = filterTag === "" || task.tag === filterTag;
    return matchTag;
  });

  filtered.sort((a, b) => {
    if (sortBy === "deadline") {
      if (!a.deadline) return 1;
      if (!b.deadline) return -1;
      return new Date(a.deadline) - new Date(b.deadline);
    } else if (sortBy === "titre") {
      return a.titre.localeCompare(b.titre);
    } else if (sortBy === "tag") {
      if (!a.tag) return 1;
      if (!b.tag) return -1;
      return a.tag.localeCompare(b.tag);
    }
    return 0;
  });

  // S√©parer les t√¢ches par date
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  const dayAfterTomorrow = new Date(today);
  dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);

  const todayTasks = [];
  const tomorrowTasks = [];
  const futureTasks = [];
  const lateTasks = [];
  const completedTasksList = [];

  filtered.forEach((task, filteredIndex) => {
    // Trouver l'index r√©el dans le tableau original des t√¢ches
    const originalIndex = tasks.findIndex(t => 
      t.id === task.id && 
      t.titre === task.titre && 
      t.tag === task.tag
    );
    
    if (task.statut === "Termin√©e") {
      completedTasksList.push({task, index: originalIndex});
      return;
    }

    const taskDate = task.deadline ? new Date(task.deadline) : null;
    if (taskDate) {
      taskDate.setHours(0, 0, 0, 0);
      
      // V√©rifier si la t√¢che est en retard
      if (taskDate < today) {
        lateTasks.push({task, index: originalIndex});
      } else if (taskDate.getTime() === today.getTime()) {
        todayTasks.push({task, index: originalIndex});
      } else if (taskDate.getTime() === tomorrow.getTime()) {
        tomorrowTasks.push({task, index: originalIndex});
      } else {
        futureTasks.push({task, index: originalIndex});
      }
    } else {
      // Si pas de date, on met dans les t√¢ches futures
      futureTasks.push({task, index: originalIndex});
    }
  });

  // Rendre les t√¢ches dans chaque colonne
  todayTasks.forEach(({task, index}) => {
    renderTaskCard(task, index, todayColumn);
  });

  tomorrowTasks.forEach(({task, index}) => {
    renderTaskCard(task, index, tomorrowColumn);
  });

  futureTasks.forEach(({task, index}) => {
    renderTaskCard(task, index, futureColumn);
  });

  // Afficher les t√¢ches en retard
if (lateTasks.length > 0) {
  // R√©partir les t√¢ches en retard sur les 4 colonnes
  lateTasks.forEach(({task, index}, i) => {
    // D√©terminer dans quelle colonne placer la t√¢che (0, 1, 2 ou 3)
    const columnIndex = i % 4;
    
    // S√©lectionner la colonne appropri√©e
    let targetColumn;
    switch (columnIndex) {
      case 0:
        targetColumn = lateColumn1;
        break;
      case 1:
        targetColumn = lateColumn2;
        break;
      case 2:
        targetColumn = lateColumn3;
        break;
      case 3:
        targetColumn = lateColumn4;
        break;
    }
    
    // Rendre la carte dans la colonne s√©lectionn√©e
    renderTaskCard(task, index, targetColumn);
  });
}

  // Afficher les t√¢ches termin√©es
  completedTasksList.forEach(({task, index}) => {
    renderCompletedTaskCard(task, index);
  });

  updateRetardButtonState();
  
  // Mettre √† jour la visibilit√© des descriptions en fonction du mode de vue
  updateTaskDescriptionVisibility();
}

function renderTaskCard(task, index, container) {
  const card = document.createElement('div');
  const classStatut = task.statut.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ /g, "");
  card.className = `task-card ${classStatut}`;
  card.dataset.taskIndex = index;
  
  // D√©terminer le degr√© d'importance
  let importance = "";
  if (task.statut === "√Ä faire") {
    importance = "!!!";
  } else if (task.statut === "√Ä lire") {
    importance = "!";
  } else if (task.statut === "√Ä challenger") {
    importance = "!!";
  }
  
  const tagClass = task.tag ? getTagClass(task.tag) : '';
  
  // Calculer la progression des sous-t√¢ches
  let subtasksHtml = '';
  let progressPercent = 0;
  let subtaskSummary = '';
  
  if (task.etapes && task.etapes.length > 0) {
    const totalSubtasks = task.etapes.length;
    const completedSubtasks = task.etapes.filter(etape => etape.faite).length;
    progressPercent = totalSubtasks > 0 ? Math.round((completedSubtasks / totalSubtasks) * 100) : 0;
    
    subtaskSummary = `<div class="subtask-summary">${completedSubtasks}/${totalSubtasks} √©tapes termin√©es</div>`;
    
    subtasksHtml = `
      <div class="subtask-progress">
        <div class="progress-bar" role="progressbar" style="width: ${progressPercent}%" 
             aria-valuenow="${progressPercent}" aria-valuemin="0" aria-valuemax="100"></div>
      </div>
    `;
  }
  
  card.innerHTML = `
    <h5 class="task-title" data-index="${index}">${task.titre}</h5>
    <div class="d-flex justify-content-between align-items-start">
      <div>
        ${task.tag ? `<span class="tag ${tagClass}" data-index="${index}">${task.tag}</span>` : ''}
        <span class="statut statut-${classStatut}">${task.statut}</span>
        ${importance ? `<span class="importance">${importance}</span>` : ''}
      </div>
      <div class="deadline-date" data-index="${index}">
        ${formatDeadline(task.deadline)}
      </div>
    </div>
    ${task.description ? `<div class="task-description-content">${task.description}</div>` : ''}
    
    <!-- Affichage des sous-t√¢ches -->
    ${subtaskSummary}
    ${subtasksHtml}
    
    <div class="task-card-footer d-flex justify-content-between align-items-center">
      <div class="card-actions">
        <select class="form-select form-select-sm statut-select" data-index="${index}">
          <option value="√Ä faire" ${task.statut === "√Ä faire" ? "selected" : ""}>√Ä faire</option>
          <option value="√Ä lire" ${task.statut === "√Ä lire" ? "selected" : ""}>√Ä lire</option>
          <option value="√Ä challenger" ${task.statut === "√Ä challenger" ? "selected" : ""}>√Ä challenger</option>
          <option value="En cours" ${task.statut === "En cours" ? "selected" : ""}>En cours</option>
          <option value="Termin√©e" ${task.statut === "Termin√©e" ? "selected" : ""}>Termin√©e</option>
        </select>
      </div>
      <div>
        <button class="btn btn-success btn-sm done-btn" data-index="${index}">Terminer</button>
      </div>
    </div>
  `;

  container.appendChild(card);
  
  // Ajouter les √©couteurs d'√©v√©nements pour l'√©dition
  const titleElement = card.querySelector('.task-title');
  titleElement.addEventListener('dblclick', function(e) {
    e.stopPropagation();
    const taskIndex = parseInt(this.dataset.index);
    editTitle(this, taskIndex);
  });
  
  const tagElement = card.querySelector('.tag');
  if (tagElement) {
    tagElement.addEventListener('dblclick', function(e) {
      e.stopPropagation();
      const taskIndex = parseInt(this.dataset.index);
      editTag(this, taskIndex);
    });
  }
  
  const deadlineElement = card.querySelector('.deadline-date');
  deadlineElement.addEventListener('dblclick', function(e) {
    e.stopPropagation();
    const taskIndex = parseInt(this.dataset.index);
    editDeadline(this, taskIndex);
  });
  
  // Ajouter les √©couteurs pour les boutons et s√©lecteurs
  const statutSelect = card.querySelector('.statut-select');
  statutSelect.addEventListener('change', function() {
    const taskIndex = parseInt(this.dataset.index);
    updateTaskStatut(taskIndex, this.value);
  });
  
  const doneButton = card.querySelector('.done-btn');
  doneButton.addEventListener('click', function(e) {
    e.stopPropagation();
    const taskIndex = parseInt(this.dataset.index);
    markAsDone(taskIndex);
  });
  
  // Ajouter un √©couteur d'√©v√©nement pour ouvrir la modale au clic sur la carte
  card.addEventListener('click', function(event) {
    // Ne pas ouvrir la modale si on clique sur un √©l√©ment interactif
    if (event.target.tagName === 'SELECT' || 
        event.target.tagName === 'BUTTON' || 
        event.target.tagName === 'INPUT') {
      return;
    }
    const taskIndex = parseInt(this.dataset.taskIndex);
    openTaskDetailModal(taskIndex);
  });
}

function renderCompletedTaskCard(task, index) {
  const col = document.createElement('div');
  col.className = 'col-md-3 mb-3';
  
  const card = document.createElement('div');
  card.className = 'task-card termin√©e';
  card.dataset.taskIndex = index; // Ajouter l'index comme attribut de donn√©es
  
  const tagClass = task.tag ? getTagClass(task.tag) : '';
  
  card.innerHTML = `
    <h5 class="task-title" data-index="${index}">${task.titre}</h5>
    <div class="d-flex justify-content-between align-items-start">
      <div>
        ${task.tag ? `<span class="tag ${tagClass}" data-index="${index}">${task.tag}</span>` : ''}
        <span class="statut statut-termin√©e">Termin√©e</span>
      </div>
      <div class="deadline-date" data-index="${index}">
        ${formatDeadline(task.deadline)}
      </div>
    </div>
    ${task.description ? `<div class="task-description-content">${task.description}</div>` : ''}
  `;
  
  col.appendChild(card);
  completedTasks.appendChild(col);
  
  // Ajouter un √©couteur d'√©v√©nement pour ouvrir la modale au clic sur la carte
  card.addEventListener('click', function(event) {
    const taskIndex = parseInt(this.dataset.taskIndex);
    openTaskDetailModal(taskIndex);
  });
}

function markAsDone(index) {
  // S'assurer que l'index est un nombre
  index = parseInt(index, 10);
  
  // V√©rifier que l'index est valide
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide:", index);
    return;
  }
  
  tasks[index].statut = "Termin√©e";
  saveTasks();
  renderTasksFiltered();
}

function editTitle(element, index) {
  // S'assurer que l'index est un nombre
  index = parseInt(index, 10);
  
  // V√©rifier que l'index est valide
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide:", index);
    return;
  }
  
  const input = document.createElement('input');
  input.type = 'text';
  input.className = 'form-control form-control-sm';
  input.value = element.textContent;
  element.textContent = '';
  element.appendChild(input);
  input.focus();

  input.addEventListener('blur', () => {
    const newValue = input.value.trim();
    if (newValue) {
      tasks[index].titre = newValue;
      saveTasks();
      renderTasksFiltered();
    } else {
      element.textContent = tasks[index].titre;
    }
  });

  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      input.blur();
    }
  });
}

function editTag(element, index) {
  // S'assurer que l'index est un nombre
  index = parseInt(index, 10);
  
  // V√©rifier que l'index est valide
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide:", index);
    return;
  }
  
  const currentTag = tasks[index].tag || "";
  const input = document.createElement("input");
  input.type = "text";
  input.className = "form-control form-control-sm";
  input.value = currentTag;
  element.innerHTML = "";
  element.appendChild(input);
  input.focus();

  input.addEventListener("blur", () => {
    tasks[index].tag = input.value.trim();
    saveTasks();
    renderTasksFiltered();
    updateTagSuggestions();
  });

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      input.blur();
    }
  });
}

function editDeadline(element, index) {
  // S'assurer que l'index est un nombre
  index = parseInt(index, 10);
  
  // V√©rifier que l'index est valide
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide:", index);
    return;
  }
  
  const currentDate = tasks[index].deadline || "";
  const input = document.createElement("input");
  input.type = "date";
  input.className = "form-control form-control-sm";
  input.value = currentDate;
  element.innerHTML = "";
  element.appendChild(input);
  input.focus();

  input.addEventListener("blur", () => {
    tasks[index].deadline = input.value;
    saveTasks();
    renderTasksFiltered();
  });

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      input.blur();
    }
  });
}

function viderTerminees() {
  const confirmation = confirm(" Archiver toutes les t√¢ches termin√©es ?");
  if (!confirmation) return;

  tasks = tasks.filter(task => task.statut !== "Termin√©e");
  saveTasks();
  renderTasksFiltered();
}

function gererTachesEnRetard() {
  const todayStr = new Date().toISOString().split("T")[0];

  tasks.forEach(task => {
    if (task.deadline && new Date(task.deadline).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) {
      task.deadline = todayStr;
    }
  });

  saveTasks();
  renderTasksFiltered();
  updateRetardButtonState();
}

function updateRetardButtonState() {
  const btn = document.getElementById('btn-gerer-retard');
  if (!btn) return;

  const now = new Date().setHours(0, 0, 0, 0);
  const enRetard = tasks.some(task =>
    task.deadline && new Date(task.deadline).setHours(0, 0, 0, 0) < now
  );

  btn.disabled = !enRetard;
}

function updateTagSuggestions() {
  // Mise √† jour des suggestions de tags pour le formulaire principal
  const tagsList = document.getElementById('tag-suggestions');
  const filterTag = document.getElementById('filter-tag');
  
  if (tagsList) {
    tagsList.innerHTML = "";
  }
  
  if (filterTag) {
    filterTag.innerHTML = `<option value="">Tous les tags</option>`;
  }

  const tags = [...new Set(tasks.map(t => t.tag).filter(Boolean))];
  
  tags.forEach(tag => {
    // Ajout au datalist du formulaire principal
    if (tagsList) {
      const option = document.createElement('option');
      option.value = tag;
      tagsList.appendChild(option);
    }

    // Ajout au select de filtre
    if (filterTag) {
      const opt = document.createElement('option');
      opt.value = tag;
      opt.textContent = tag;
      filterTag.appendChild(opt);
    }
  });
  
  // Mise √† jour des suggestions pour la modale
  updateModalTagSuggestions();
}

function updateModalTagSuggestions() {
  const datalist = document.getElementById('tag-suggestions-modal');
  if (!datalist) return;
  
  datalist.innerHTML = '';
  
  const uniqueTags = [...new Set(tasks.map(task => task.tag).filter(tag => tag))];
  
  uniqueTags.forEach(tag => {
    const option = document.createElement('option');
    option.value = tag;
    datalist.appendChild(option);
  });
}

// R√©initialiser les filtres
function resetFilters() {
  document.getElementById('filter-tag').value = '';
  document.getElementById('sort-by').value = 'deadline';
  renderTasksFiltered();
}

// Fonction pour basculer entre la vue d√©taill√©e et la vue simple
function toggleViewMode() {
  isDetailedView = !isDetailedView;
  
  // Mettre √† jour l'√©tat du checkbox
  const viewModeToggle = document.getElementById('view-mode-toggle');
  viewModeToggle.checked = isDetailedView;
  
  // Mettre √† jour le texte du label
  const viewModeLabel = document.querySelector('label[for="view-mode-toggle"]');
  viewModeLabel.textContent = isDetailedView ? 'Vue d√©taill√©e' : 'Vue simple';
  
  // Mettre √† jour l'affichage des cartes
  updateTaskDescriptionVisibility();
}

// Mettre √† jour la visibilit√© des descriptions de t√¢ches
function updateTaskDescriptionVisibility() {
  const taskDescriptions = document.querySelectorAll('.task-description-content');
  
  taskDescriptions.forEach(description => {
    if (isDetailedView) {
      description.style.display = 'block';
    } else {
      description.style.display = 'none';
    }
  });
}

// D√©finition de la fonction addTask
function addTask(event) {
  event.preventDefault();
  
  const titre = document.getElementById("task-title").value.trim();
  const tag = document.getElementById("task-tag").value.trim();
  const deadline = document.getElementById("task-deadline").value;
  const statut = document.getElementById("task-statut").value || "√Ä faire";
  
  if (!titre) {
    alert("Le titre est obligatoire");
    return;
  }
  
  const nouvelleTache = {
    titre,
    tag,
    deadline,
    statut,
    description: "", // Ajout du champ description
    etapes: [], // Ajout du tableau pour les sous-t√¢ches
    createdAt: new Date().toISOString()
  };
  
  tasks.push(nouvelleTache);
  saveTasks();
  document.getElementById("task-form").reset();
  // R√©initialiser le statut √† "√Ä faire"
  document.getElementById("task-statut").value = "√Ä faire";
  renderTasksFiltered();
  updateTagSuggestions();
}

// D√©finition de la fonction updateTaskStatut
function updateTaskStatut(index, newStatut) {
  // S'assurer que l'index est un nombre
  index = parseInt(index, 10);
  
  // V√©rifier que l'index est valide
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide:", index);
    return;
  }
  
  tasks[index].statut = newStatut;
  saveTasks();
  renderTasksFiltered();
}

function openTaskDetailModal(index) {
  // S'assurer que l'index est un nombre
  index = parseInt(index, 10);
  
  // V√©rifier que l'index est valide
  if (isNaN(index) || index < 0 || index >= tasks.length) {
    console.error("Index de t√¢che invalide:", index);
    return;
  }
  
  const task = tasks[index];
  document.getElementById('modal-task-index').value = index;
  document.getElementById('modal-task-title').value = task.titre;
  
  // R√©initialiser TinyMCE avant de d√©finir le contenu
  if (tinymce.get('modal-task-description')) {
    tinymce.get('modal-task-description').setContent(task.description || '');
  } else {
    document.getElementById('modal-task-description').value = task.description || '';
    // R√©initialiser TinyMCE si l'√©diteur n'existe pas encore
    initTinyMCE();
  }
  
  document.getElementById('modal-task-tag').value = task.tag || '';
  document.getElementById('modal-task-deadline').value = task.deadline || '';
  document.getElementById('modal-task-statut').value = task.statut;
  
  // Afficher les sous-t√¢ches
  renderSubtasks(task.etapes || []);
  
  updateModalTagSuggestions();
  
  // Ajouter les √©couteurs d'√©v√©nements pour les boutons de date rapide
  document.getElementById('btn-tomorrow').onclick = () => setQuickDeadline(1);
  document.getElementById('btn-day-after').onclick = () => setQuickDeadline(2);
  document.getElementById('btn-next-week').onclick = () => setQuickDeadlineNextWeek();
  
  const modal = new bootstrap.Modal(document.getElementById('taskDetailModal'));
  modal.show();
}

// Fonction pour d√©finir rapidement une date limite √† X jours dans le futur
function setQuickDeadline(daysToAdd) {
  const today = new Date();
  const targetDate = new Date(today);
  targetDate.setDate(today.getDate() + daysToAdd);
  
  // Formater la date au format YYYY-MM-DD pour l'input date
  const formattedDate = targetDate.toISOString().split('T')[0];
  document.getElementById('modal-task-deadline').value = formattedDate;
}

// Fonction pour d√©finir la date limite au lundi de la semaine prochaine
function setQuickDeadlineNextWeek() {
  const today = new Date();
  const targetDate = new Date(today);
  
  // Calculer le nombre de jours jusqu'au prochain lundi
  // Si on est lundi (1), on ajoute 7 jours
  // Si on est mardi (2), on ajoute 6 jours, etc.
  const currentDay = today.getDay(); // 0 = dimanche, 1 = lundi, ..., 6 = samedi
  const daysUntilNextMonday = currentDay === 0 ? 1 : (8 - currentDay);
  
  targetDate.setDate(today.getDate() + daysUntilNextMonday);
  
  // Formater la date au format YYYY-MM-DD pour l'input date
  const formattedDate = targetDate.toISOString().split('T')[0];
  document.getElementById('modal-task-deadline').value = formattedDate;
}

function saveTaskDetails() {
  const index = parseInt(document.getElementById('modal-task-index').value);
  const task = tasks[index];
  
  task.titre = document.getElementById('modal-task-title').value.trim();
  
  // R√©cup√©rer le contenu de TinyMCE
  if (tinymce.get('modal-task-description')) {
    task.description = tinymce.get('modal-task-description').getContent();
  } else {
    task.description = document.getElementById('modal-task-description').value.trim();
  }
  
  task.tag = document.getElementById('modal-task-tag').value.trim();
  task.deadline = document.getElementById('modal-task-deadline').value;
  task.statut = document.getElementById('modal-task-statut').value;
  
  // R√©cup√©rer les sous-t√¢ches
  task.etapes = collectSubtasks();
  
  saveTasks();
  renderTasksFiltered();
  
  const modal = bootstrap.Modal.getInstance(document.getElementById('taskDetailModal'));
  modal.hide();
}

// Fonction pour exporter les t√¢ches au format JSON
function exportTasksToJson() {
  // Cr√©er un objet Blob avec le contenu JSON
  const tasksJson = JSON.stringify(tasks, null, 2);
  const blob = new Blob([tasksJson], { type: 'application/json' });
  
  // Cr√©er une URL pour le Blob
  const url = URL.createObjectURL(blob);
  
  // Cr√©er un √©l√©ment <a> pour d√©clencher le t√©l√©chargement
  const a = document.createElement('a');
  a.href = url;
  a.download = `tasks_export_${new Date().toISOString().split('T')[0]}.json`;
  
  // Ajouter l'√©l√©ment au document, cliquer dessus, puis le supprimer
  document.body.appendChild(a);
  a.click();
  
  // Nettoyer
  setTimeout(() => {
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, 100);
}

// Fonction pour importer les t√¢ches depuis un fichier JSON
function importTasksFromJson(event) {
  const file = event.target.files[0];
  if (!file) return;
  
  const reader = new FileReader();
  
  reader.onload = function(e) {
    try {
      // Analyser le contenu JSON
      const importedTasks = JSON.parse(e.target.result);
      
      // V√©rifier que le contenu est un tableau
      if (!Array.isArray(importedTasks)) {
        alert('Format de fichier invalide. Le fichier doit contenir un tableau de t√¢ches.');
        return;
      }
      
      // Demander confirmation avant de remplacer les t√¢ches existantes
      if (confirm(`Voulez-vous importer ${importedTasks.length} t√¢ches ? Cela remplacera toutes les t√¢ches existantes.`)) {
        // Remplacer les t√¢ches existantes par les t√¢ches import√©es
        tasks = importedTasks;
        
        // Sauvegarder les t√¢ches dans le localStorage
        saveTasks();
        
        // Rafra√Æchir l'affichage
        renderTasksFiltered();
        
        alert('Import r√©ussi !');
      }
    } catch (error) {
      alert(`Erreur lors de l'analyse du fichier JSON : ${error.message}`);
    }
  };
  
  reader.onerror = function() {
    alert('Erreur lors de la lecture du fichier.');
  };
  
  // Lire le fichier comme texte
  reader.readAsText(file);
  
  // R√©initialiser l'input file pour permettre de s√©lectionner le m√™me fichier √† nouveau si n√©cessaire
  event.target.value = '';
}

// Initialisation de TinyMCE
function initTinyMCE() {
  tinymce.init({
    selector: '#modal-task-description',
    plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed linkchecker permanentpen powerpaste advtable advcode editimage advtemplate mentions tableofcontents footnotes mergetags autocorrect typography inlinecss',
    toolbar: 'undo redo | blocks | bold italic underline strikethrough | link image checklist numlist bullist | addcomment showcomments | align | indent outdent | emoticons charmap | removeformat',
    tinycomments_mode: 'embedded',
    tinycomments_author: 'Utilisateur',
    mergetags_list: [
      { value: 'Aujourd\'hui', title: 'Date' },
      { value: 'Demain', title: 'Demain' },
    ],
    language: 'fr_FR',
    height: 300,
    menubar: false,
    promotion: false,
    branding: false,
    setup: function(editor) {
      editor.on('change', function() {
        editor.save(); // Sauvegarde le contenu dans le textarea
      });
    }
  });
}

// Fonction pour d√©placer toutes les t√¢ches en retard √† aujourd'hui
function deplacerRetardVersAujourdhui() {
  console.log("Fonction deplacerRetardVersAujourdhui ex√©cut√©e");
  
  // D√©finir la date d'aujourd'hui
  // Utiliser directement les valeurs de l'objet Date pour √©viter les probl√®mes de fuseau horaire
  const maintenant = new Date();
  console.log("Date brute:", maintenant);
  
  // Formater la date au format YYYY-MM-DD
  const jour = String(maintenant.getDate()).padStart(2, '0');
  const mois = String(maintenant.getMonth() + 1).padStart(2, '0'); // Les mois commencent √† 0
  const annee = maintenant.getFullYear();
  
  const aujourdhuiStr = `${annee}-${mois}-${jour}`;
  console.log("Date d'aujourd'hui format√©e manuellement:", aujourdhuiStr);
  
  // R√©cup√©rer les t√¢ches depuis le localStorage
  const tasksFromStorage = JSON.parse(localStorage.getItem('tasks')) || [];
  console.log("T√¢ches r√©cup√©r√©es du localStorage:", tasksFromStorage.length);
  
  // Mettre √† jour la variable globale tasks
  tasks = tasksFromStorage;
  
  let modificationEffectuee = false;
  let compteur = 0;
  
  // Identifier et d√©placer les t√¢ches en retard
  for (let i = 0; i < tasks.length; i++) {
    const task = tasks[i];
    
    if (task.deadline && task.statut !== "Termin√©e" && !task.completed) {
      // Comparer les dates sous forme de cha√Ænes (YYYY-MM-DD)
      console.log(`T√¢che ${i+1}/${tasks.length}: "${task.titre}", deadline: ${task.deadline}, statut: ${task.statut}`);
      
      // Comparer les dates directement comme des cha√Ænes
      if (task.deadline < aujourdhuiStr) {
        console.log(`  - T√¢che en retard d√©tect√©e, modification de la date de ${task.deadline} √† ${aujourdhuiStr}`);
        task.deadline = aujourdhuiStr;
        modificationEffectuee = true;
        compteur++;
      } else {
        console.log(`  - T√¢che non en retard: ${task.deadline} >= ${aujourdhuiStr}`);
      }
    }
  }
  
  console.log(`Modifications effectu√©es: ${modificationEffectuee}, Nombre: ${compteur}`);
  
  // Sauvegarder les modifications et rafra√Æchir l'affichage
  if (modificationEffectuee) {
    console.log("Sauvegarde des modifications dans localStorage");
    localStorage.setItem('tasks', JSON.stringify(tasks));
    console.log("Rafra√Æchissement de l'affichage");
    renderTasksFiltered();
    alert(`${compteur} t√¢che(s) en retard ont √©t√© d√©plac√©e(s) √† aujourd'hui`);
  } else {
    alert('Aucune t√¢che en retard √† d√©placer');
  }
  
  console.log("Fin de la fonction deplacerRetardVersAujourdhui");
}

// Fonctions pour la gestion des sous-t√¢ches
function renderSubtasks(subtasks = []) {
  const container = document.getElementById('subtasks-container');
  container.innerHTML = '';
  
  if (subtasks.length === 0) {
    container.innerHTML = '<div class="text-muted fst-italic">Aucune √©tape pour cette t√¢che. Cliquez sur "Ajouter une √©tape" pour commencer.</div>';
    return;
  }
  
  // Cr√©er les √©l√©ments pour chaque sous-t√¢che
  subtasks.forEach((subtask, index) => {
    const subtaskItem = document.createElement('div');
    subtaskItem.className = 'subtask-item';
    subtaskItem.dataset.index = index;
    
    subtaskItem.innerHTML = `
      <div class="form-check">
        <input class="form-check-input subtask-checkbox" type="checkbox" id="subtask-${index}" ${subtask.faite ? 'checked' : ''}>
      </div>
      <div class="subtask-text" contenteditable="true">${subtask.titre}</div>
      <div class="subtask-actions">
        <button class="btn btn-sm btn-outline-danger delete-subtask-btn">
          <i class="bi bi-trash"></i>
        </button>
      </div>
    `;
    
    container.appendChild(subtaskItem);
    
    // Ajouter les √©couteurs d'√©v√©nements
    const checkbox = subtaskItem.querySelector('.subtask-checkbox');
    checkbox.addEventListener('change', function() {
      subtask.faite = this.checked;
    });
    
    const textElement = subtaskItem.querySelector('.subtask-text');
    textElement.addEventListener('focus', function() {
      this.classList.add('editing');
    });
    
    textElement.addEventListener('blur', function() {
      this.classList.remove('editing');
      subtask.titre = this.textContent.trim();
    });
    
    const deleteBtn = subtaskItem.querySelector('.delete-subtask-btn');
    deleteBtn.addEventListener('click', function() {
      container.removeChild(subtaskItem);
    });
  });
}

// Fonction pour ajouter une nouvelle sous-t√¢che
function addSubtask() {
  const container = document.getElementById('subtasks-container');
  
  // Si c'est la premi√®re sous-t√¢che, vider le message "Aucune √©tape"
  if (container.querySelector('.text-muted')) {
    container.innerHTML = '';
  }
  
  const index = container.children.length;
  
  const subtaskItem = document.createElement('div');
  subtaskItem.className = 'subtask-item';
  subtaskItem.dataset.index = index;
  
  subtaskItem.innerHTML = `
    <div class="form-check">
      <input class="form-check-input subtask-checkbox" type="checkbox" id="subtask-${index}">
    </div>
    <div class="subtask-text" contenteditable="true">Nouvelle √©tape</div>
    <div class="subtask-actions">
      <button class="btn btn-sm btn-outline-danger delete-subtask-btn">
        <i class="bi bi-trash"></i>
      </button>
    </div>
  `;
  
  container.appendChild(subtaskItem);
  
  // Ajouter les √©couteurs d'√©v√©nements
  const checkbox = subtaskItem.querySelector('.subtask-checkbox');
  checkbox.addEventListener('change', function() {
    // Pas besoin de mettre √† jour un objet ici, cela sera fait lors de la sauvegarde
  });
  
  const textElement = subtaskItem.querySelector('.subtask-text');
  textElement.classList.add('editing');
  textElement.focus();
  
  textElement.addEventListener('focus', function() {
    this.classList.add('editing');
  });
  
  textElement.addEventListener('blur', function() {
    this.classList.remove('editing');
  });
  
  const deleteBtn = subtaskItem.querySelector('.delete-subtask-btn');
  deleteBtn.addEventListener('click', function() {
    container.removeChild(subtaskItem);
  });
}

// Fonction pour collecter toutes les sous-t√¢ches de la modale
function collectSubtasks() {
  const container = document.getElementById('subtasks-container');
  const subtaskItems = container.querySelectorAll('.subtask-item');
  const subtasks = [];
  
  subtaskItems.forEach(item => {
    const checkbox = item.querySelector('.subtask-checkbox');
    const text = item.querySelector('.subtask-text');
    
    subtasks.push({
      titre: text.textContent.trim(),
      faite: checkbox.checked
    });
  });
  
  return subtasks;
}

// Initialisation
initTinyMCE();
renderTasksFiltered();
updateTagSuggestions();

// Attendre que le DOM soit charg√© avant d'ajouter les √©couteurs d'√©v√©nements
document.addEventListener('DOMContentLoaded', function() {
  // Ajouter un √©couteur d'√©v√©nement pour le formulaire
  const taskForm = document.getElementById('task-form');
  if (taskForm) {
    taskForm.addEventListener('submit', addTask);
  }
  
  // Ajouter un √©couteur d'√©v√©nement pour le toggle de la vue
  const viewModeToggle = document.getElementById('view-mode-toggle');
  if (viewModeToggle) {
    viewModeToggle.addEventListener('change', toggleViewMode);
    // D√©clencher l'√©v√©nement une fois pour initialiser l'affichage
    toggleViewMode();
  }
  
  // Ajouter des √©couteurs pour les filtres
  const filterTag = document.getElementById('filter-tag');
  const sortBy = document.getElementById('sort-by');
  
  if (filterTag) {
    filterTag.addEventListener('change', renderTasksFiltered);
  }
  
  if (sortBy) {
    sortBy.addEventListener('change', renderTasksFiltered);
  }
  
  // Ajouter des √©couteurs pour les boutons
  const resetFiltersBtn = document.getElementById('reset-filters-btn');
  if (resetFiltersBtn) {
    resetFiltersBtn.addEventListener('click', resetFilters);
  }
  
  const viderTermineesBtn = document.getElementById('vider-terminees-btn');
  if (viderTermineesBtn) {
    viderTermineesBtn.addEventListener('click', viderTerminees);
  }
  
  const saveTaskDetailsBtn = document.getElementById('save-task-details-btn');
  if (saveTaskDetailsBtn) {
    saveTaskDetailsBtn.addEventListener('click', saveTaskDetails);
  }
  
  const exportJsonBtn = document.getElementById('export-json-btn');
  if (exportJsonBtn) {
    exportJsonBtn.addEventListener('click', exportTasksToJson);
  }
  
  // Initialisation du bouton d'import JSON
  const importJsonBtn = document.getElementById('import-json-btn');
  const importJsonInput = document.getElementById('import-json-input');
  if (importJsonBtn && importJsonInput) {
    importJsonBtn.addEventListener('click', function() {
      importJsonInput.click(); // D√©clencher le s√©lecteur de fichier
    });
    importJsonInput.addEventListener('change', importTasksFromJson);
  }
  
  // Initialiser la date par d√©faut
  const taskDeadline = document.getElementById('task-deadline');
  if (taskDeadline) {
    taskDeadline.value = new Date().toISOString().split("T")[0];
  }
  
  // √âcouteur pour le bouton de gestion des t√¢ches en retard
  const btnGererRetard = document.getElementById('btn-gerer-retard');
  if (btnGererRetard) {
    btnGererRetard.addEventListener('click', function() {
      console.log("Bouton 'Passer √† aujourd'hui' cliqu√©");
      deplacerRetardVersAujourdhui();
    });
  }
  
  // √âcouteur pour le bouton "Ajouter une √©tape"
  const addSubtaskBtn = document.getElementById('add-subtask-btn');
  if (addSubtaskBtn) {
    addSubtaskBtn.addEventListener('click', addSubtask);
  }
});
